# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025 Guilherme Janczak,
#                           Robert Kirkman,
#                           Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


name: ' ' # empty name
on: [push, pull_request]

jobs:
  # This is what is currently necessary to make termux-docker work with GHA.
  working:
    strategy:
      matrix:
        include:
          - runner: ubuntu-24.04
            architecture: i686
          - runner: ubuntu-24.04
            architecture: x86_64
          - runner: ubuntu-24.04-arm
            architecture: arm
          - runner: ubuntu-24.04-arm
            architecture: aarch64
    runs-on: ${{ matrix.runner }}
    # prepare writable volume prefix mount for actions/upload-artifact,
    # based on the higher-profile workaround for 32-bit GNU/Linux containers explained here
    # https://github.com/actions/upload-artifact/issues/616#issuecomment-2350667347
    container:
      image: termux/termux-docker:${{ matrix.architecture }}
      volumes: 
        - /tmp/node20:/__e/node20
    # approximate environment variables for actions that can't be forced to use entrypoint.sh
    env:
      TERMUX_MAIN_PACKAGE_FORMAT: debian
      ANDROID_ROOT: /system
      ANDROID_DATA: /data
      PREFIX: /data/data/com.termux/files/usr
      HOME: /data/data/com.termux/files/home
      PATH: /data/data/com.termux/files/usr/bin
      TMPDIR: /data/data/com.termux/files/usr/tmp
      LANG: en_US.UTF-8
      TZ: UTC
    steps:
      - name: set pkg command to use the packages-cf.termux.dev mirror
        run: ln -sf ${PREFIX}/etc/termux/mirrors/default ${PREFIX}/etc/termux/chosen_mirrors
      - name: upgrade all packages to prepare for installing nodejs
        run: /entrypoint.sh bash -c "yes | pkg upgrade -y"
      # actions/checkout will "think" that termux's tar binary isn't executable if it doesn't have
      # executable bit actually set for all users, since even though that permissions restriction
      # doesn't actually apply to the root user (at least on Android), GitHub Actions' internal
      # source code doesn't "care" and would refuse to run the binary anyway.
      # relevant internal source code of GitHub Actions:
      # https://github.com/actions/toolkit/blob/930c89072712a3aac52d74b23338f00bb0cfcb24/packages/io/src/io-util.ts#L167-L177
      - name: fix executable bit for all binaries in $PREFIX/bin for all users
        run: chmod -R o+x ${PREFIX}/bin
      - name: install bionic-libc nodejs to force compatibility with actions/checkout and actions/upload-artifact
        run: |
          /entrypoint.sh pkg install -y nodejs-lts
          ln -sf ${PREFIX}/bin /__e/node20/bin
      - uses: actions/checkout@v4.2.2
      - name: fix permissions of repository after actions/checkout, which ran as root user, while entrypoint.sh activates system user (1000)
        run: chown -R 1000:1000 .
      - name: setup
        run: |
          # pkg/pip need to be prefixed with /entrypoint.sh because GHA overrode
          # the entrypoint.
          /entrypoint.sh pkg install -y "clang" "git" "ninja" "pacman" "python" "termux-keyring" "tree" "tsu"
          /entrypoint.sh pacman-key --init
          # /entrypoint.sh gpg --homedir /data/data/com.termux/files/usr/etc/pacman.d/gnupg --recv-keys "998DE27318E867EA976BA877389CEED64573DFCA"
          # /entrypoint.sh pacman -Sy termux-keyring
          /entrypoint.sh pip install "meson"
      - name: build
        # run: touch artifact
        run: |
          /entrypoint.sh echo "OS: $(uname -o)"
          /entrypoint.sh tree -L 2 "/"
          # Install libcrash-bash
          /entrypoint.sh git clone --branch="libcrash-bash" --single-branch --depth=1 "https://github.com/themartiancompany/fur" "fur"
          /entrypoint.sh echo "current position in container: $(pwd)"
          /entrypoint.sh tree "$(pwd)"
          /entrypoint.sh rm "fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh pacman -Udd --noconfirm "fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh rm -rf "fur"
          # Install fur
          /entrypoint.sh git clone --branch="fur" --single-branch --depth=1 "https://github.com/themartiancompany/fur" "fur"
          /entrypoint.sh rm "fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh pacman -Udd --noconfirm "fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh rm -rf "fur"
          # Install reallymakepkg
          /entrypoint.sh fur -v -p "pacman" -d "reallymakepkg"
          /entrypoint.sh pacman -Udd --noconfirm ""*".pkg.tar."*
          /entrypoint.sh tree .
          /entrypoint.sh fur -v -p "pacman" "evm-chains-info"
          # /entrypoint.sh git clone --branch="libcrash-bash" --single-branch --depth=1 "https://github.com/themartiancompany/fur" "fur"
          # /entrypoint.sh echo "current position in container: $(pwd)"
          # /entrypoint.sh tree "$(pwd)"
          # /entrypoint.sh rm "fur/termux/any/"*".pkg.tar."*".sig"
          # /entrypoint.sh pacman -Udd --noconfirm "fur/termux/any/"*".pkg.tar."*
          # /entrypoint.sh rm -rf "fur"

          /entrypoint.sh git clone "https://github.com/themartiancompany/libcrash-bash-ur" "libcrash-bash"
          # /entrypoint.sh cd "$(pwd)/libcrash-bash" && makepkg
      - uses: actions/upload-artifact@v4.6.0
        with:
          name: artifact-${{ matrix.architecture }}
          path: artifact

  # This is the ideal way termux-docker would work with GHA.
  broken-ideal:
    if:
      false
    runs-on:
      ubuntu-latest
    container:
      termux/termux-docker:x86_64
    steps:
      - name:
          setup
        run: |
          pkg install -y "ninja" "clang" "pacman" "python" "git"
          pip install meson
      - uses:
          actions/checkout@v3.3.0
      - name:
          build
        run:
          touch artifact
      - uses:
          actions/upload-artifact@v3.1.2
        if:
          always()
        with:
          name:
            artifact
          path:
            artifact

